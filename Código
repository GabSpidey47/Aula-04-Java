package br.com.gabrieltales.todolist.filter;

import java.io.IOException;
import java.util.Base64;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import at.favre.lib.crypto.bcrypt.BCrypt;
import br.com.gabrieltales.todolist.user.IUserRepository;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class FilterTaskAuth extends OncePerRequestFilter{

    @Autowired
    private IUserRepository userRepository;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
                var servletPath = request.getServletPath();

                if(servletPath.equals("/tasks")) {
                   //Passo a Passo: Pegar a autenticação (que é o usuario e senha)
                   var authorization = request.getHeader("Authorization");
                
                   var authEncoded = authorization.substring("Basic".length()).trim();
                
                   byte[] authDecode = Base64.getDecoder().decode(authEncoded);

                   var authString = new String(authDecode);

                   // ["gabrieltales", "12345"]
                   String[] credentials = authString.split(":");
                   String username = credentials[0];
                   String password = credentials[1];
                
                   //dá um authorization, pega o substring, e passa o que quer procurar ou pegar o basic, e lenght para pegar o tamanho de caracteres que tem dentro do basic
                
                   // Validar o usuario
                    var user = this.userRepository.findByUsername(username);
                    if(user == null) {
                        response.sendError(401);
                    } else {
                        // Validar a senha
                        var passwordVerify = BCrypt.verifyer().verify(password.toCharArray(), user.getPassword());
                        if(passwordVerify.verified) {
                           filterChain.doFilter(request, response);
                        } else {
                           response.sendError(401);

                        }
                        //se estiver tudo ok, segue viagem

                        //se tiver algum erro no processdo de pegar autorização ate as validações, já retornam falando que o usuário não tem permissão

                    }


                } else {
                    filterChain.doFilter(request, response);

                }

            }
    
        }
